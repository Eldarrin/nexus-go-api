// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UpdateHelmHostedRepositoryReader is a Reader for the UpdateHelmHostedRepository structure.
type UpdateHelmHostedRepositoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateHelmHostedRepositoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateHelmHostedRepositoryNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateHelmHostedRepositoryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateHelmHostedRepositoryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateHelmHostedRepositoryNoContent creates a UpdateHelmHostedRepositoryNoContent with default headers values
func NewUpdateHelmHostedRepositoryNoContent() *UpdateHelmHostedRepositoryNoContent {
	return &UpdateHelmHostedRepositoryNoContent{}
}

/*
	UpdateHelmHostedRepositoryNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type UpdateHelmHostedRepositoryNoContent struct {
}

// IsSuccess returns true when this update repository23 no content response has a 2xx status code
func (o *UpdateHelmHostedRepositoryNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update repository23 no content response has a 3xx status code
func (o *UpdateHelmHostedRepositoryNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository23 no content response has a 4xx status code
func (o *UpdateHelmHostedRepositoryNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update repository23 no content response has a 5xx status code
func (o *UpdateHelmHostedRepositoryNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository23 no content response a status code equal to that given
func (o *UpdateHelmHostedRepositoryNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *UpdateHelmHostedRepositoryNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/hosted/{repositoryName}][%d] updateRepository23NoContent ", 204)
}

func (o *UpdateHelmHostedRepositoryNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/hosted/{repositoryName}][%d] updateRepository23NoContent ", 204)
}

func (o *UpdateHelmHostedRepositoryNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateHelmHostedRepositoryUnauthorized creates a UpdateHelmHostedRepositoryUnauthorized with default headers values
func NewUpdateHelmHostedRepositoryUnauthorized() *UpdateHelmHostedRepositoryUnauthorized {
	return &UpdateHelmHostedRepositoryUnauthorized{}
}

/*
	UpdateHelmHostedRepositoryUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type UpdateHelmHostedRepositoryUnauthorized struct {
}

// IsSuccess returns true when this update repository23 unauthorized response has a 2xx status code
func (o *UpdateHelmHostedRepositoryUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository23 unauthorized response has a 3xx status code
func (o *UpdateHelmHostedRepositoryUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository23 unauthorized response has a 4xx status code
func (o *UpdateHelmHostedRepositoryUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository23 unauthorized response has a 5xx status code
func (o *UpdateHelmHostedRepositoryUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository23 unauthorized response a status code equal to that given
func (o *UpdateHelmHostedRepositoryUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UpdateHelmHostedRepositoryUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/hosted/{repositoryName}][%d] updateRepository23Unauthorized ", 401)
}

func (o *UpdateHelmHostedRepositoryUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/hosted/{repositoryName}][%d] updateRepository23Unauthorized ", 401)
}

func (o *UpdateHelmHostedRepositoryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateHelmHostedRepositoryForbidden creates a UpdateHelmHostedRepositoryForbidden with default headers values
func NewUpdateHelmHostedRepositoryForbidden() *UpdateHelmHostedRepositoryForbidden {
	return &UpdateHelmHostedRepositoryForbidden{}
}

/*
	UpdateHelmHostedRepositoryForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type UpdateHelmHostedRepositoryForbidden struct {
}

// IsSuccess returns true when this update repository23 forbidden response has a 2xx status code
func (o *UpdateHelmHostedRepositoryForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository23 forbidden response has a 3xx status code
func (o *UpdateHelmHostedRepositoryForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository23 forbidden response has a 4xx status code
func (o *UpdateHelmHostedRepositoryForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository23 forbidden response has a 5xx status code
func (o *UpdateHelmHostedRepositoryForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository23 forbidden response a status code equal to that given
func (o *UpdateHelmHostedRepositoryForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateHelmHostedRepositoryForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/hosted/{repositoryName}][%d] updateRepository23Forbidden ", 403)
}

func (o *UpdateHelmHostedRepositoryForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/hosted/{repositoryName}][%d] updateRepository23Forbidden ", 403)
}

func (o *UpdateHelmHostedRepositoryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
