// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UpdateRawHostedRepositoryReader is a Reader for the UpdateRawHostedRepository structure.
type UpdateRawHostedRepositoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRawHostedRepositoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateRawHostedRepositoryNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateRawHostedRepositoryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateRawHostedRepositoryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateRawHostedRepositoryNoContent creates a UpdateRawHostedRepositoryNoContent with default headers values
func NewUpdateRawHostedRepositoryNoContent() *UpdateRawHostedRepositoryNoContent {
	return &UpdateRawHostedRepositoryNoContent{}
}

/*
	UpdateRawHostedRepositoryNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type UpdateRawHostedRepositoryNoContent struct {
}

// IsSuccess returns true when this update repository6 no content response has a 2xx status code
func (o *UpdateRawHostedRepositoryNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update repository6 no content response has a 3xx status code
func (o *UpdateRawHostedRepositoryNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository6 no content response has a 4xx status code
func (o *UpdateRawHostedRepositoryNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update repository6 no content response has a 5xx status code
func (o *UpdateRawHostedRepositoryNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository6 no content response a status code equal to that given
func (o *UpdateRawHostedRepositoryNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *UpdateRawHostedRepositoryNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/hosted/{repositoryName}][%d] updateRepository6NoContent ", 204)
}

func (o *UpdateRawHostedRepositoryNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/hosted/{repositoryName}][%d] updateRepository6NoContent ", 204)
}

func (o *UpdateRawHostedRepositoryNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRawHostedRepositoryUnauthorized creates a UpdateRawHostedRepositoryUnauthorized with default headers values
func NewUpdateRawHostedRepositoryUnauthorized() *UpdateRawHostedRepositoryUnauthorized {
	return &UpdateRawHostedRepositoryUnauthorized{}
}

/*
	UpdateRawHostedRepositoryUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type UpdateRawHostedRepositoryUnauthorized struct {
}

// IsSuccess returns true when this update repository6 unauthorized response has a 2xx status code
func (o *UpdateRawHostedRepositoryUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository6 unauthorized response has a 3xx status code
func (o *UpdateRawHostedRepositoryUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository6 unauthorized response has a 4xx status code
func (o *UpdateRawHostedRepositoryUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository6 unauthorized response has a 5xx status code
func (o *UpdateRawHostedRepositoryUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository6 unauthorized response a status code equal to that given
func (o *UpdateRawHostedRepositoryUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UpdateRawHostedRepositoryUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/hosted/{repositoryName}][%d] updateRepository6Unauthorized ", 401)
}

func (o *UpdateRawHostedRepositoryUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/hosted/{repositoryName}][%d] updateRepository6Unauthorized ", 401)
}

func (o *UpdateRawHostedRepositoryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRawHostedRepositoryForbidden creates a UpdateRawHostedRepositoryForbidden with default headers values
func NewUpdateRawHostedRepositoryForbidden() *UpdateRawHostedRepositoryForbidden {
	return &UpdateRawHostedRepositoryForbidden{}
}

/*
	UpdateRawHostedRepositoryForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type UpdateRawHostedRepositoryForbidden struct {
}

// IsSuccess returns true when this update repository6 forbidden response has a 2xx status code
func (o *UpdateRawHostedRepositoryForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository6 forbidden response has a 3xx status code
func (o *UpdateRawHostedRepositoryForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository6 forbidden response has a 4xx status code
func (o *UpdateRawHostedRepositoryForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository6 forbidden response has a 5xx status code
func (o *UpdateRawHostedRepositoryForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository6 forbidden response a status code equal to that given
func (o *UpdateRawHostedRepositoryForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateRawHostedRepositoryForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/hosted/{repositoryName}][%d] updateRepository6Forbidden ", 403)
}

func (o *UpdateRawHostedRepositoryForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/hosted/{repositoryName}][%d] updateRepository6Forbidden ", 403)
}

func (o *UpdateRawHostedRepositoryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
