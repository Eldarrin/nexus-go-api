// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new repository management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for repository management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateMavenGroupRepository(params *CreateMavenGroupRepositoryParams, opts ...ClientOption) (*CreateMavenGroupRepositoryCreated, error)

	CreateMavenHostedRepository(params *CreateMavenHostedRepositoryParams, opts ...ClientOption) (*CreateMavenHostedRepositoryCreated, error)

	CreateNpmProxyRepository(params *CreateNpmProxyRepositoryParams, opts ...ClientOption) (*CreateNpmProxyRepositoryCreated, error)

	CreateNugetGroupRepository(params *CreateNugetGroupRepositoryParams, opts ...ClientOption) (*CreateNugetGroupRepositoryCreated, error)

	CreateNugetHostedRepository(params *CreateNugetHostedRepositoryParams, opts ...ClientOption) (*CreateNugetHostedRepositoryCreated, error)

	CreateNugetProxyRepository(params *CreateNugetProxyRepositoryParams, opts ...ClientOption) (*CreateNugetProxyRepositoryCreated, error)

	CreateRubyGemsGroupRepository(params *CreateRubyGemsGroupRepositoryParams, opts ...ClientOption) (*CreateRubyGemsGroupRepositoryCreated, error)

	CreateRubyGemsHostedRepository(params *CreateRubyGemsHostedRepositoryParams, opts ...ClientOption) (*CreateRubyGemsHostedRepositoryCreated, error)

	CreateRubyGemsProxyRepository(params *CreateRubyGemsProxyRepositoryParams, opts ...ClientOption) (*CreateRubyGemsProxyRepositoryCreated, error)

	CreateDockerGroupRepository(params *CreateDockerGroupRepositoryParams, opts ...ClientOption) (*CreateDockerGroupRepositoryCreated, error)

	CreateDockerHostedRepository(params *CreateDockerHostedRepositoryParams, opts ...ClientOption) (*CreateDockerHostedRepositoryCreated, error)

	CreateDockerProxyRepository(params *CreateDockerProxyRepositoryParams, opts ...ClientOption) (*CreateDockerProxyRepositoryCreated, error)

	CreateMavenProxyRepository(params *CreateMavenProxyRepositoryParams, opts ...ClientOption) (*CreateMavenProxyRepositoryCreated, error)

	CreateYumGroupRepository(params *CreateYumGroupRepositoryParams, opts ...ClientOption) (*CreateYumGroupRepositoryCreated, error)

	CreateYumHostedRepository(params *CreateYumHostedRepositoryParams, opts ...ClientOption) (*CreateYumHostedRepositoryCreated, error)

	CreateYumProxyRepository(params *CreateYumProxyRepositoryParams, opts ...ClientOption) (*CreateYumProxyRepositoryCreated, error)

	CreateHelmHostedRepository(params *CreateHelmHostedRepositoryParams, opts ...ClientOption) (*CreateHelmHostedRepositoryCreated, error)

	CreateHelmProxyRepository(params *CreateHelmProxyRepositoryParams, opts ...ClientOption) (*CreateHelmProxyRepositoryCreated, error)

	CreateGitLfsHostedRepository(params *CreateGitLfsHostedRepositoryParams, opts ...ClientOption) (*CreateGitLfsHostedRepositoryCreated, error)

	CreatePypiGroupRepository(params *CreatePypiGroupRepositoryParams, opts ...ClientOption) (*CreatePypiGroupRepositoryCreated, error)

	CreatePypiHostedRepository(params *CreatePypiHostedRepositoryParams, opts ...ClientOption) (*CreatePypiHostedRepositoryCreated, error)

	CreatePypiProxyRepository(params *CreatePypiProxyRepositoryParams, opts ...ClientOption) (*CreatePypiProxyRepositoryCreated, error)

	CreateCondaProxyRepository(params *CreateCondaProxyRepositoryParams, opts ...ClientOption) (*CreateCondaProxyRepositoryCreated, error)

	CreateAptHostedRepository(params *CreateAptHostedRepositoryParams, opts ...ClientOption) (*CreateAptHostedRepositoryCreated, error)

	CreateConanProxyRepository(params *CreateConanProxyRepositoryParams, opts ...ClientOption) (*CreateConanProxyRepositoryCreated, error)

	CreateRGroupRepository(params *CreateRGroupRepositoryParams, opts ...ClientOption) (*CreateRGroupRepositoryCreated, error)

	CreateRHostedRepository(params *CreateRHostedRepositoryParams, opts ...ClientOption) (*CreateRHostedRepositoryCreated, error)

	CreateRProxyRepository(params *CreateRProxyRepositoryParams, opts ...ClientOption) (*CreateRProxyRepositoryCreated, error)

	CreateCocoapodsProxyRepository(params *CreateCocoapodsProxyRepositoryParams, opts ...ClientOption) (*CreateCocoapodsProxyRepositoryCreated, error)

	CreateGolangGroupRepository(params *CreateGolangGroupRepositoryParams, opts ...ClientOption) (*CreateGolangGroupRepositoryCreated, error)

	CreateGolangProxyRepository(params *CreateGolangProxyRepositoryParams, opts ...ClientOption) (*CreateGolangProxyRepositoryCreated, error)

	CreateP2ProxyRepository(params *CreateP2ProxyRepositoryParams, opts ...ClientOption) (*CreateP2ProxyRepositoryCreated, error)

	CreateBowerGroupRepository(params *CreateBowerGroupRepositoryParams, opts ...ClientOption) (*CreateBowerGroupRepositoryCreated, error)

	CreateBowerHostedRepository(params *CreateBowerHostedRepositoryParams, opts ...ClientOption) (*CreateBowerHostedRepositoryCreated, error)

	CreateAptProxyRepository(params *CreateAptProxyRepositoryParams, opts ...ClientOption) (*CreateAptProxyRepositoryCreated, error)

	CreateBowerProxyRepository(params *CreateBowerProxyRepositoryParams, opts ...ClientOption) (*CreateBowerProxyRepositoryCreated, error)

	CreateRawGroupRepository(params *CreateRawGroupRepositoryParams, opts ...ClientOption) (*CreateRawGroupRepositoryCreated, error)

	CreateRawHostedRepository(params *CreateRawHostedRepositoryParams, opts ...ClientOption) (*CreateRawHostedRepositoryCreated, error)

	CreateRawProxyRepository(params *CreateRawProxyRepositoryParams, opts ...ClientOption) (*CreateRawProxyRepositoryCreated, error)

	CreateNpmGroupRepository(params *CreateNpmGroupRepositoryParams, opts ...ClientOption) (*CreateNpmGroupRepositoryCreated, error)

	CreateNpmHostedRepository(params *CreateNpmHostedRepositoryParams, opts ...ClientOption) (*CreateNpmHostedRepositoryCreated, error)

	DeleteRepository(params *DeleteRepositoryParams, opts ...ClientOption) (*DeleteRepositoryNoContent, error)

	DisableRepositoryHealthCheck(params *DisableRepositoryHealthCheckParams, opts ...ClientOption) (*DisableRepositoryHealthCheckNoContent, error)

	EnableRepositoryHealthCheck(params *EnableRepositoryHealthCheckParams, opts ...ClientOption) (*EnableRepositoryHealthCheckNoContent, error)

	GetRepositories(params *GetRepositoriesParams, opts ...ClientOption) (*GetRepositoriesOK, error)

	GetRepositories1(params *GetRepositories1Params, opts ...ClientOption) (*GetRepositories1OK, error)

	GetRepository(params *GetRepositoryParams, opts ...ClientOption) (*GetRepositoryOK, error)

	GetMavenGroupRepository(params *GetMavenGroupRepositoryParams, opts ...ClientOption) (*GetMavenGroupRepositoryOK, error)

	GetNpmHostedRepository(params *GetNpmHostedRepositoryParams, opts ...ClientOption) (*GetNpmHostedRepositoryOK, error)

	GetNpmProxyRepository(params *GetNpmProxyRepositoryParams, opts ...ClientOption) (*GetNpmProxyRepositoryOK, error)

	GetNugetGroupRepository(params *GetNugetGroupRepositoryParams, opts ...ClientOption) (*GetNugetGroupRepositoryOK, error)

	GetNugetHostedRepository(params *GetNugetHostedRepositoryParams, opts ...ClientOption) (*GetNugetHostedRepositoryOK, error)

	GetNugetProxyRepository(params *GetNugetProxyRepositoryParams, opts ...ClientOption) (*GetNugetProxyRepositoryOK, error)

	GetRubyGemsGroupRepository(params *GetRubyGemsGroupRepositoryParams, opts ...ClientOption) (*GetRubyGemsGroupRepositoryOK, error)

	GetRubyGemsHostedRepository(params *GetRubyGemsHostedRepositoryParams, opts ...ClientOption) (*GetRubyGemsHostedRepositoryOK, error)

	GetRubyGemsProxyRepository(params *GetRubyGemsProxyRepositoryParams, opts ...ClientOption) (*GetRubyGemsProxyRepositoryOK, error)

	GetDockerGroupRepository(params *GetDockerGroupRepositoryParams, opts ...ClientOption) (*GetDockerGroupRepositoryOK, error)

	GetDockerHostedRepository(params *GetDockerHostedRepositoryParams, opts ...ClientOption) (*GetDockerHostedRepositoryOK, error)

	GetMavenHostedRepository(params *GetMavenHostedRepositoryParams, opts ...ClientOption) (*GetMavenHostedRepositoryOK, error)

	GetDockerProxyRepository(params *GetDockerProxyRepositoryParams, opts ...ClientOption) (*GetDockerProxyRepositoryOK, error)

	GetYumGroupRepository(params *GetYumGroupRepositoryParams, opts ...ClientOption) (*GetYumGroupRepositoryOK, error)

	GetYumHostedRepository(params *GetYumHostedRepositoryParams, opts ...ClientOption) (*GetYumHostedRepositoryOK, error)

	GetYumProxyRepository(params *GetYumProxyRepositoryParams, opts ...ClientOption) (*GetYumProxyRepositoryOK, error)

	GetHelmHostedRepository(params *GetHelmHostedRepositoryParams, opts ...ClientOption) (*GetHelmHostedRepositoryOK, error)

	GetHelmProxyRepository(params *GetHelmProxyRepositoryParams, opts ...ClientOption) (*GetHelmProxyRepositoryOK, error)

	GetGitLfsHostedRepository(params *GetGitLfsHostedRepositoryParams, opts ...ClientOption) (*GetGitLfsHostedRepositoryOK, error)

	GetPypiGroupRepository(params *GetPypiGroupRepositoryParams, opts ...ClientOption) (*GetPypiGroupRepositoryOK, error)

	GetPypiHostedRepository(params *GetPypiHostedRepositoryParams, opts ...ClientOption) (*GetPypiHostedRepositoryOK, error)

	GetPypiProxyRepository(params *GetPypiProxyRepositoryParams, opts ...ClientOption) (*GetPypiProxyRepositoryOK, error)

	GetMavenProxyRepository(params *GetMavenProxyRepositoryParams, opts ...ClientOption) (*GetMavenProxyRepositoryOK, error)

	GetCondaProxyRepository(params *GetCondaProxyRepositoryParams, opts ...ClientOption) (*GetCondaProxyRepositoryOK, error)

	GetConanProxyRepository(params *GetConanProxyRepositoryParams, opts ...ClientOption) (*GetConanProxyRepositoryOK, error)

	GetRGroupRepository(params *GetRGroupRepositoryParams, opts ...ClientOption) (*GetRGroupRepositoryOK, error)

	GetRHostedRepository(params *GetRHostedRepositoryParams, opts ...ClientOption) (*GetRHostedRepositoryOK, error)

	GetRProxyRepository(params *GetRProxyRepositoryParams, opts ...ClientOption) (*GetRProxyRepositoryOK, error)

	GetCocoapodsProxyRepository(params *GetCocoapodsProxyRepositoryParams, opts ...ClientOption) (*GetCocoapodsProxyRepositoryOK, error)

	GetGolangGroupRepository(params *GetGolangGroupRepositoryParams, opts ...ClientOption) (*GetGolangGroupRepositoryOK, error)

	GetGolangProxyRepository(params *GetGolangProxyRepositoryParams, opts ...ClientOption) (*GetGolangProxyRepositoryOK, error)

	GetP2ProxyRepository(params *GetP2ProxyRepositoryParams, opts ...ClientOption) (*GetP2ProxyRepositoryOK, error)

	GetBowerGroupRepository(params *GetBowerGroupRepositoryParams, opts ...ClientOption) (*GetBowerGroupRepositoryOK, error)

	GetAptHostedRepository(params *GetAptHostedRepositoryParams, opts ...ClientOption) (*GetAptHostedRepositoryOK, error)

	GetBowerHostedRepository(params *GetBowerHostedRepositoryParams, opts ...ClientOption) (*GetBowerHostedRepositoryOK, error)

	GetBowerProxyRepository(params *GetBowerProxyRepositoryParams, opts ...ClientOption) (*GetBowerProxyRepositoryOK, error)

	GetAptProxyRepository(params *GetAptProxyRepositoryParams, opts ...ClientOption) (*GetAptProxyRepositoryOK, error)

	GetRawGroupRepository(params *GetRawGroupRepositoryParams, opts ...ClientOption) (*GetRawGroupRepositoryOK, error)

	GetRawHostedRepository(params *GetRawHostedRepositoryParams, opts ...ClientOption) (*GetRawHostedRepositoryOK, error)

	GetRawProxyRepository(params *GetRawProxyRepositoryParams, opts ...ClientOption) (*GetRawProxyRepositoryOK, error)

	GetNpmGroupRepository(params *GetNpmGroupRepositoryParams, opts ...ClientOption) (*GetNpmGroupRepositoryOK, error)

	InvalidateCache(params *InvalidateCacheParams, opts ...ClientOption) (*InvalidateCacheNoContent, error)

	RebuildIndex(params *RebuildIndexParams, opts ...ClientOption) (*RebuildIndexNoContent, error)

	UpdateMavenGroupRepository(params *UpdateMavenGroupRepositoryParams, opts ...ClientOption) (*UpdateMavenGroupRepositoryNoContent, error)

	UpdateMavenHostedRepository(params *UpdateMavenHostedRepositoryParams, opts ...ClientOption) (*UpdateMavenHostedRepositoryNoContent, error)

	UpdateNpmProxyRepository(params *UpdateNpmProxyRepositoryParams, opts ...ClientOption) (*UpdateNpmProxyRepositoryNoContent, error)

	UpdateNugetGroupRepository(params *UpdateNugetGroupRepositoryParams, opts ...ClientOption) (*UpdateNugetGroupRepositoryNoContent, error)

	UpdateNugetHostedRepository(params *UpdateNugetHostedRepositoryParams, opts ...ClientOption) (*UpdateNugetHostedRepositoryNoContent, error)

	UpdateNugetProxyRepository(params *UpdateNugetProxyRepositoryParams, opts ...ClientOption) (*UpdateNugetProxyRepositoryNoContent, error)

	UpdateRubyGemsGroupRepository(params *UpdateRubyGemsGroupRepositoryParams, opts ...ClientOption) (*UpdateRubyGemsGroupRepositoryNoContent, error)

	UpdateRubyGemsHostedRepository(params *UpdateRubyGemsHostedRepositoryParams, opts ...ClientOption) (*UpdateRubyGemsHostedRepositoryNoContent, error)

	UpdateRubyGemsProxyRepository(params *UpdateRubyGemsProxyRepositoryParams, opts ...ClientOption) (*UpdateRubyGemsProxyRepositoryNoContent, error)

	UpdateDockerGroupRepository(params *UpdateDockerGroupRepositoryParams, opts ...ClientOption) (*UpdateDockerGroupRepositoryNoContent, error)

	UpdateDockerHostedRepository(params *UpdateDockerHostedRepositoryParams, opts ...ClientOption) (*UpdateDockerHostedRepositoryNoContent, error)

	UpdateDockerProxyRepository(params *UpdateDockerProxyRepositoryParams, opts ...ClientOption) (*UpdateDockerProxyRepositoryNoContent, error)

	UpdateMavenProxyRepository(params *UpdateMavenProxyRepositoryParams, opts ...ClientOption) (*UpdateMavenProxyRepositoryNoContent, error)

	UpdateYumGroupRepository(params *UpdateYumGroupRepositoryParams, opts ...ClientOption) (*UpdateYumGroupRepositoryNoContent, error)

	UpdateYumHostedRepository(params *UpdateYumHostedRepositoryParams, opts ...ClientOption) (*UpdateYumHostedRepositoryNoContent, error)

	UpdateYumProxyRepository(params *UpdateYumProxyRepositoryParams, opts ...ClientOption) (*UpdateYumProxyRepositoryNoContent, error)

	UpdateHelmHostedRepository(params *UpdateHelmHostedRepositoryParams, opts ...ClientOption) (*UpdateHelmHostedRepositoryNoContent, error)

	UpdateHelmProxyRepository(params *UpdateHelmProxyRepositoryParams, opts ...ClientOption) (*UpdateHelmProxyRepositoryNoContent, error)

	UpdateGitLfsHostedRepository(params *UpdateGitLfsHostedRepositoryParams, opts ...ClientOption) (*UpdateGitLfsHostedRepositoryNoContent, error)

	UpdatePypiGroupRepository(params *UpdatePypiGroupRepositoryParams, opts ...ClientOption) (*UpdatePypiGroupRepositoryNoContent, error)

	UpdatePypiHostedRepository(params *UpdatePypiHostedRepositoryParams, opts ...ClientOption) (*UpdatePypiHostedRepositoryNoContent, error)

	UpdatePypiProxyRepository(params *UpdatePypiProxyRepositoryParams, opts ...ClientOption) (*UpdatePypiProxyRepositoryNoContent, error)

	UpdateCondaProxyRepository(params *UpdateCondaProxyRepositoryParams, opts ...ClientOption) (*UpdateCondaProxyRepositoryNoContent, error)

	UpdateAptHostedRepository(params *UpdateAptHostedRepositoryParams, opts ...ClientOption) (*UpdateAptHostedRepositoryNoContent, error)

	UpdateConanProxyRepository(params *UpdateConanProxyRepositoryParams, opts ...ClientOption) (*UpdateConanProxyRepositoryNoContent, error)

	UpdateRGroupRepository(params *UpdateRGroupRepositoryParams, opts ...ClientOption) (*UpdateRGroupRepositoryNoContent, error)

	UpdateRHostedRepository(params *UpdateRHostedRepositoryParams, opts ...ClientOption) (*UpdateRHostedRepositoryNoContent, error)

	UpdateRProxyRepository(params *UpdateRProxyRepositoryParams, opts ...ClientOption) (*UpdateRProxyRepositoryNoContent, error)

	UpdateCocoapodsProxyRepository(params *UpdateCocoapodsProxyRepositoryParams, opts ...ClientOption) (*UpdateCocoapodsProxyRepositoryNoContent, error)

	UpdateGolangGroupRepository(params *UpdateGolangGroupRepositoryParams, opts ...ClientOption) (*UpdateGolangGroupRepositoryNoContent, error)

	UpdateGolangProxyRepository(params *UpdateGolangProxyRepositoryParams, opts ...ClientOption) (*UpdateGolangProxyRepositoryNoContent, error)

	UpdateP2ProxyRepository(params *UpdateP2ProxyRepositoryParams, opts ...ClientOption) (*UpdateP2ProxyRepositoryNoContent, error)

	UpdateBowerGroupRepository(params *UpdateBowerGroupRepositoryParams, opts ...ClientOption) (*UpdateBowerGroupRepositoryNoContent, error)

	UpdateBowerHostedRepository(params *UpdateBowerHostedRepositoryParams, opts ...ClientOption) (*UpdateBowerHostedRepositoryNoContent, error)

	UpdateAptProxyRepository(params *UpdateAptProxyRepositoryParams, opts ...ClientOption) (*UpdateAptProxyRepositoryNoContent, error)

	UpdateBowerProxyRepository(params *UpdateBowerProxyRepositoryParams, opts ...ClientOption) (*UpdateBowerProxyRepositoryNoContent, error)

	UpdateRawGroupRepository(params *UpdateRawGroupRepositoryParams, opts ...ClientOption) (*UpdateRawGroupRepositoryNoContent, error)

	UpdateRawHostedRepository(params *UpdateRawHostedRepositoryParams, opts ...ClientOption) (*UpdateRawHostedRepositoryNoContent, error)

	UpdateRawProxyRepository(params *UpdateRawProxyRepositoryParams, opts ...ClientOption) (*UpdateRawProxyRepositoryNoContent, error)

	UpdateNpmGroupRepository(params *UpdateNpmGroupRepositoryParams, opts ...ClientOption) (*UpdateNpmGroupRepositoryNoContent, error)

	UpdateNpmHostedRepository(params *UpdateNpmHostedRepositoryParams, opts ...ClientOption) (*UpdateNpmHostedRepositoryNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateMavenGroupRepository creates maven group repository
*/
func (a *Client) CreateMavenGroupRepository(params *CreateMavenGroupRepositoryParams, opts ...ClientOption) (*CreateMavenGroupRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMavenGroupRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository",
		Method:             "POST",
		PathPattern:        "/v1/repositories/maven/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateMavenGroupRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMavenGroupRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateMavenHostedRepository creates maven hosted repository
*/
func (a *Client) CreateMavenHostedRepository(params *CreateMavenHostedRepositoryParams, opts ...ClientOption) (*CreateMavenHostedRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMavenHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_1",
		Method:             "POST",
		PathPattern:        "/v1/repositories/maven/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateMavenHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMavenHostedRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateNpmProxyRepository creates npm proxy repository
*/
func (a *Client) CreateNpmProxyRepository(params *CreateNpmProxyRepositoryParams, opts ...ClientOption) (*CreateNpmProxyRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNpmProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_10",
		Method:             "POST",
		PathPattern:        "/v1/repositories/npm/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNpmProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNpmProxyRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_10: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateNugetGroupRepository creates nu get group repository
*/
func (a *Client) CreateNugetGroupRepository(params *CreateNugetGroupRepositoryParams, opts ...ClientOption) (*CreateNugetGroupRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNugetGroupRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_11",
		Method:             "POST",
		PathPattern:        "/v1/repositories/nuget/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNugetGroupRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNugetGroupRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_11: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateNugetHostedRepository creates nu get hosted repository
*/
func (a *Client) CreateNugetHostedRepository(params *CreateNugetHostedRepositoryParams, opts ...ClientOption) (*CreateNugetHostedRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNugetHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_12",
		Method:             "POST",
		PathPattern:        "/v1/repositories/nuget/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNugetHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNugetHostedRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_12: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateNugetProxyRepository creates nu get proxy repository
*/
func (a *Client) CreateNugetProxyRepository(params *CreateNugetProxyRepositoryParams, opts ...ClientOption) (*CreateNugetProxyRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNugetProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_13",
		Method:             "POST",
		PathPattern:        "/v1/repositories/nuget/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNugetProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNugetProxyRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_13: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateRubyGemsGroupRepository creates ruby gems group repository
*/
func (a *Client) CreateRubyGemsGroupRepository(params *CreateRubyGemsGroupRepositoryParams, opts ...ClientOption) (*CreateRubyGemsGroupRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRubyGemsGroupRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_14",
		Method:             "POST",
		PathPattern:        "/v1/repositories/rubygems/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRubyGemsGroupRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRubyGemsGroupRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_14: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateRubyGemsHostedRepository creates ruby gems hosted repository
*/
func (a *Client) CreateRubyGemsHostedRepository(params *CreateRubyGemsHostedRepositoryParams, opts ...ClientOption) (*CreateRubyGemsHostedRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRubyGemsHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_15",
		Method:             "POST",
		PathPattern:        "/v1/repositories/rubygems/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRubyGemsHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRubyGemsHostedRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_15: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateRubyGemsProxyRepository creates ruby gems proxy repository
*/
func (a *Client) CreateRubyGemsProxyRepository(params *CreateRubyGemsProxyRepositoryParams, opts ...ClientOption) (*CreateRubyGemsProxyRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRubyGemsProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_16",
		Method:             "POST",
		PathPattern:        "/v1/repositories/rubygems/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRubyGemsProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRubyGemsProxyRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_16: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateDockerGroupRepository creates docker group repository
*/
func (a *Client) CreateDockerGroupRepository(params *CreateDockerGroupRepositoryParams, opts ...ClientOption) (*CreateDockerGroupRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDockerGroupRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_17",
		Method:             "POST",
		PathPattern:        "/v1/repositories/docker/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDockerGroupRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDockerGroupRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_17: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateDockerHostedRepository creates docker hosted repository
*/
func (a *Client) CreateDockerHostedRepository(params *CreateDockerHostedRepositoryParams, opts ...ClientOption) (*CreateDockerHostedRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDockerHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_18",
		Method:             "POST",
		PathPattern:        "/v1/repositories/docker/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDockerHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDockerHostedRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_18: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateDockerProxyRepository creates docker proxy repository
*/
func (a *Client) CreateDockerProxyRepository(params *CreateDockerProxyRepositoryParams, opts ...ClientOption) (*CreateDockerProxyRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDockerProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_19",
		Method:             "POST",
		PathPattern:        "/v1/repositories/docker/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDockerProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDockerProxyRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_19: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateMavenProxyRepository creates maven proxy repository
*/
func (a *Client) CreateMavenProxyRepository(params *CreateMavenProxyRepositoryParams, opts ...ClientOption) (*CreateMavenProxyRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMavenProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_2",
		Method:             "POST",
		PathPattern:        "/v1/repositories/maven/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateMavenProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMavenProxyRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateYumGroupRepository creates yum group repository
*/
func (a *Client) CreateYumGroupRepository(params *CreateYumGroupRepositoryParams, opts ...ClientOption) (*CreateYumGroupRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateYumGroupRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_20",
		Method:             "POST",
		PathPattern:        "/v1/repositories/yum/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateYumGroupRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateYumGroupRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_20: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateYumHostedRepository creates yum hosted repository
*/
func (a *Client) CreateYumHostedRepository(params *CreateYumHostedRepositoryParams, opts ...ClientOption) (*CreateYumHostedRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateYumHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_21",
		Method:             "POST",
		PathPattern:        "/v1/repositories/yum/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateYumHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateYumHostedRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_21: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateYumProxyRepository creates yum proxy repository
*/
func (a *Client) CreateYumProxyRepository(params *CreateYumProxyRepositoryParams, opts ...ClientOption) (*CreateYumProxyRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateYumProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_22",
		Method:             "POST",
		PathPattern:        "/v1/repositories/yum/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateYumProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateYumProxyRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_22: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateHelmHostedRepository creates helm hosted repository
*/
func (a *Client) CreateHelmHostedRepository(params *CreateHelmHostedRepositoryParams, opts ...ClientOption) (*CreateHelmHostedRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateHelmHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_23",
		Method:             "POST",
		PathPattern:        "/v1/repositories/helm/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateHelmHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateHelmHostedRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_23: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateHelmProxyRepository creates helm proxy repository
*/
func (a *Client) CreateHelmProxyRepository(params *CreateHelmProxyRepositoryParams, opts ...ClientOption) (*CreateHelmProxyRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateHelmProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_24",
		Method:             "POST",
		PathPattern:        "/v1/repositories/helm/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateHelmProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateHelmProxyRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_24: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateGitLfsHostedRepository creates git l f s hosted repository
*/
func (a *Client) CreateGitLfsHostedRepository(params *CreateGitLfsHostedRepositoryParams, opts ...ClientOption) (*CreateGitLfsHostedRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGitLfsHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_25",
		Method:             "POST",
		PathPattern:        "/v1/repositories/gitlfs/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateGitLfsHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGitLfsHostedRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_25: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreatePypiGroupRepository creates py p i group repository
*/
func (a *Client) CreatePypiGroupRepository(params *CreatePypiGroupRepositoryParams, opts ...ClientOption) (*CreatePypiGroupRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePypiGroupRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_26",
		Method:             "POST",
		PathPattern:        "/v1/repositories/pypi/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePypiGroupRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePypiGroupRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_26: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreatePypiHostedRepository creates py p i hosted repository
*/
func (a *Client) CreatePypiHostedRepository(params *CreatePypiHostedRepositoryParams, opts ...ClientOption) (*CreatePypiHostedRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePypiHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_27",
		Method:             "POST",
		PathPattern:        "/v1/repositories/pypi/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePypiHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePypiHostedRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_27: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreatePypiProxyRepository creates py p i proxy repository
*/
func (a *Client) CreatePypiProxyRepository(params *CreatePypiProxyRepositoryParams, opts ...ClientOption) (*CreatePypiProxyRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePypiProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_28",
		Method:             "POST",
		PathPattern:        "/v1/repositories/pypi/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePypiProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePypiProxyRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_28: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateCondaProxyRepository creates conda proxy repository
*/
func (a *Client) CreateCondaProxyRepository(params *CreateCondaProxyRepositoryParams, opts ...ClientOption) (*CreateCondaProxyRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCondaProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_29",
		Method:             "POST",
		PathPattern:        "/v1/repositories/conda/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCondaProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCondaProxyRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_29: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateAptHostedRepository creates a p t hosted repository
*/
func (a *Client) CreateAptHostedRepository(params *CreateAptHostedRepositoryParams, opts ...ClientOption) (*CreateAptHostedRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAptHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_3",
		Method:             "POST",
		PathPattern:        "/v1/repositories/apt/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAptHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAptHostedRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateConanProxyRepository creates conan proxy repository
*/
func (a *Client) CreateConanProxyRepository(params *CreateConanProxyRepositoryParams, opts ...ClientOption) (*CreateConanProxyRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateConanProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_30",
		Method:             "POST",
		PathPattern:        "/v1/repositories/conan/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateConanProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateConanProxyRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_30: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateRGroupRepository creates r group repository
*/
func (a *Client) CreateRGroupRepository(params *CreateRGroupRepositoryParams, opts ...ClientOption) (*CreateRGroupRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRGroupRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_31",
		Method:             "POST",
		PathPattern:        "/v1/repositories/r/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRGroupRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRGroupRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_31: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateRHostedRepository creates r hosted repository
*/
func (a *Client) CreateRHostedRepository(params *CreateRHostedRepositoryParams, opts ...ClientOption) (*CreateRHostedRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_32",
		Method:             "POST",
		PathPattern:        "/v1/repositories/r/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRHostedRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_32: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateRProxyRepository creates r proxy repository
*/
func (a *Client) CreateRProxyRepository(params *CreateRProxyRepositoryParams, opts ...ClientOption) (*CreateRProxyRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_33",
		Method:             "POST",
		PathPattern:        "/v1/repositories/r/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRProxyRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_33: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateCocoapodsProxyRepository creates cocoapods proxy repository
*/
func (a *Client) CreateCocoapodsProxyRepository(params *CreateCocoapodsProxyRepositoryParams, opts ...ClientOption) (*CreateCocoapodsProxyRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCocoapodsProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_34",
		Method:             "POST",
		PathPattern:        "/v1/repositories/cocoapods/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCocoapodsProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCocoapodsProxyRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_34: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateGolangGroupRepository creates a go group repository
*/
func (a *Client) CreateGolangGroupRepository(params *CreateGolangGroupRepositoryParams, opts ...ClientOption) (*CreateGolangGroupRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGolangGroupRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_35",
		Method:             "POST",
		PathPattern:        "/v1/repositories/go/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateGolangGroupRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGolangGroupRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_35: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateGolangProxyRepository creates a go proxy repository
*/
func (a *Client) CreateGolangProxyRepository(params *CreateGolangProxyRepositoryParams, opts ...ClientOption) (*CreateGolangProxyRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGolangProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_36",
		Method:             "POST",
		PathPattern:        "/v1/repositories/go/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateGolangProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGolangProxyRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_36: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateP2ProxyRepository creates p2 proxy repository
*/
func (a *Client) CreateP2ProxyRepository(params *CreateP2ProxyRepositoryParams, opts ...ClientOption) (*CreateP2ProxyRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateP2ProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_37",
		Method:             "POST",
		PathPattern:        "/v1/repositories/p2/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateP2ProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateP2ProxyRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_37: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateBowerGroupRepository creates bower group repository
*/
func (a *Client) CreateBowerGroupRepository(params *CreateBowerGroupRepositoryParams, opts ...ClientOption) (*CreateBowerGroupRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBowerGroupRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_38",
		Method:             "POST",
		PathPattern:        "/v1/repositories/bower/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateBowerGroupRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBowerGroupRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_38: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateBowerHostedRepository creates bower hosted repository
*/
func (a *Client) CreateBowerHostedRepository(params *CreateBowerHostedRepositoryParams, opts ...ClientOption) (*CreateBowerHostedRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBowerHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_39",
		Method:             "POST",
		PathPattern:        "/v1/repositories/bower/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateBowerHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBowerHostedRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_39: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateAptProxyRepository creates a p t proxy repository
*/
func (a *Client) CreateAptProxyRepository(params *CreateAptProxyRepositoryParams, opts ...ClientOption) (*CreateAptProxyRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAptProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_4",
		Method:             "POST",
		PathPattern:        "/v1/repositories/apt/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAptProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAptProxyRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_4: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateBowerProxyRepository creates bower proxy repository
*/
func (a *Client) CreateBowerProxyRepository(params *CreateBowerProxyRepositoryParams, opts ...ClientOption) (*CreateBowerProxyRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBowerProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_40",
		Method:             "POST",
		PathPattern:        "/v1/repositories/bower/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateBowerProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBowerProxyRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_40: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateRawGroupRepository creates raw group repository
*/
func (a *Client) CreateRawGroupRepository(params *CreateRawGroupRepositoryParams, opts ...ClientOption) (*CreateRawGroupRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRawGroupRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_5",
		Method:             "POST",
		PathPattern:        "/v1/repositories/raw/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRawGroupRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRawGroupRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_5: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateRawHostedRepository creates raw hosted repository
*/
func (a *Client) CreateRawHostedRepository(params *CreateRawHostedRepositoryParams, opts ...ClientOption) (*CreateRawHostedRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRawHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_6",
		Method:             "POST",
		PathPattern:        "/v1/repositories/raw/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRawHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRawHostedRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_6: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateRawProxyRepository creates raw proxy repository
*/
func (a *Client) CreateRawProxyRepository(params *CreateRawProxyRepositoryParams, opts ...ClientOption) (*CreateRawProxyRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRawProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_7",
		Method:             "POST",
		PathPattern:        "/v1/repositories/raw/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRawProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRawProxyRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_7: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateNpmGroupRepository creates npm group repository
*/
func (a *Client) CreateNpmGroupRepository(params *CreateNpmGroupRepositoryParams, opts ...ClientOption) (*CreateNpmGroupRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNpmGroupRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_8",
		Method:             "POST",
		PathPattern:        "/v1/repositories/npm/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNpmGroupRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNpmGroupRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_8: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateNpmHostedRepository creates npm hosted repository
*/
func (a *Client) CreateNpmHostedRepository(params *CreateNpmHostedRepositoryParams, opts ...ClientOption) (*CreateNpmHostedRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNpmHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRepository_9",
		Method:             "POST",
		PathPattern:        "/v1/repositories/npm/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNpmHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNpmHostedRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepository_9: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteRepository deletes repository of any format
*/
func (a *Client) DeleteRepository(params *DeleteRepositoryParams, opts ...ClientOption) (*DeleteRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteRepository",
		Method:             "DELETE",
		PathPattern:        "/v1/repositories/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DisableRepositoryHealthCheck disables repository health check proxy repositories only
*/
func (a *Client) DisableRepositoryHealthCheck(params *DisableRepositoryHealthCheckParams, opts ...ClientOption) (*DisableRepositoryHealthCheckNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDisableRepositoryHealthCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "disableRepositoryHealthCheck",
		Method:             "DELETE",
		PathPattern:        "/v1/repositories/{repositoryName}/health-check",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DisableRepositoryHealthCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DisableRepositoryHealthCheckNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for disableRepositoryHealthCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EnableRepositoryHealthCheck enables repository health check proxy repositories only
*/
func (a *Client) EnableRepositoryHealthCheck(params *EnableRepositoryHealthCheckParams, opts ...ClientOption) (*EnableRepositoryHealthCheckNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnableRepositoryHealthCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "enableRepositoryHealthCheck",
		Method:             "POST",
		PathPattern:        "/v1/repositories/{repositoryName}/health-check",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EnableRepositoryHealthCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnableRepositoryHealthCheckNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enableRepositoryHealthCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositories lists repositories
*/
func (a *Client) GetRepositories(params *GetRepositoriesParams, opts ...ClientOption) (*GetRepositoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepositories",
		Method:             "GET",
		PathPattern:        "/v1/repositorySettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepositories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositories1 lists repositories
*/
func (a *Client) GetRepositories1(params *GetRepositories1Params, opts ...ClientOption) (*GetRepositories1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositories1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepositories_1",
		Method:             "GET",
		PathPattern:        "/v1/repositories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositories1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositories1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepositories_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepository gets repository details
*/
func (a *Client) GetRepository(params *GetRepositoryParams, opts ...ClientOption) (*GetRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository",
		Method:             "GET",
		PathPattern:        "/v1/repositories/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMavenGroupRepository gets repository
*/
func (a *Client) GetMavenGroupRepository(params *GetMavenGroupRepositoryParams, opts ...ClientOption) (*GetMavenGroupRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMavenGroupRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_1",
		Method:             "GET",
		PathPattern:        "/v1/repositories/maven/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMavenGroupRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMavenGroupRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNpmHostedRepository gets repository
*/
func (a *Client) GetNpmHostedRepository(params *GetNpmHostedRepositoryParams, opts ...ClientOption) (*GetNpmHostedRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNpmHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_10",
		Method:             "GET",
		PathPattern:        "/v1/repositories/npm/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNpmHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNpmHostedRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_10: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNpmProxyRepository gets repository
*/
func (a *Client) GetNpmProxyRepository(params *GetNpmProxyRepositoryParams, opts ...ClientOption) (*GetNpmProxyRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNpmProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_11",
		Method:             "GET",
		PathPattern:        "/v1/repositories/npm/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNpmProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNpmProxyRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_11: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNugetGroupRepository gets repository
*/
func (a *Client) GetNugetGroupRepository(params *GetNugetGroupRepositoryParams, opts ...ClientOption) (*GetNugetGroupRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNugetGroupRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_12",
		Method:             "GET",
		PathPattern:        "/v1/repositories/nuget/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNugetGroupRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNugetGroupRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_12: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNugetHostedRepository gets repository
*/
func (a *Client) GetNugetHostedRepository(params *GetNugetHostedRepositoryParams, opts ...ClientOption) (*GetNugetHostedRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNugetHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_13",
		Method:             "GET",
		PathPattern:        "/v1/repositories/nuget/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNugetHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNugetHostedRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_13: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNugetProxyRepository gets repository
*/
func (a *Client) GetNugetProxyRepository(params *GetNugetProxyRepositoryParams, opts ...ClientOption) (*GetNugetProxyRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNugetProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_14",
		Method:             "GET",
		PathPattern:        "/v1/repositories/nuget/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNugetProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNugetProxyRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_14: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRubyGemsGroupRepository gets repository
*/
func (a *Client) GetRubyGemsGroupRepository(params *GetRubyGemsGroupRepositoryParams, opts ...ClientOption) (*GetRubyGemsGroupRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRubyGemsGroupRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_15",
		Method:             "GET",
		PathPattern:        "/v1/repositories/rubygems/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRubyGemsGroupRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRubyGemsGroupRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_15: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRubyGemsHostedRepository gets repository
*/
func (a *Client) GetRubyGemsHostedRepository(params *GetRubyGemsHostedRepositoryParams, opts ...ClientOption) (*GetRubyGemsHostedRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRubyGemsHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_16",
		Method:             "GET",
		PathPattern:        "/v1/repositories/rubygems/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRubyGemsHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRubyGemsHostedRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_16: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRubyGemsProxyRepository gets repository
*/
func (a *Client) GetRubyGemsProxyRepository(params *GetRubyGemsProxyRepositoryParams, opts ...ClientOption) (*GetRubyGemsProxyRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRubyGemsProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_17",
		Method:             "GET",
		PathPattern:        "/v1/repositories/rubygems/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRubyGemsProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRubyGemsProxyRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_17: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDockerGroupRepository gets repository
*/
func (a *Client) GetDockerGroupRepository(params *GetDockerGroupRepositoryParams, opts ...ClientOption) (*GetDockerGroupRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDockerGroupRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_18",
		Method:             "GET",
		PathPattern:        "/v1/repositories/docker/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDockerGroupRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDockerGroupRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_18: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDockerHostedRepository gets repository
*/
func (a *Client) GetDockerHostedRepository(params *GetDockerHostedRepositoryParams, opts ...ClientOption) (*GetDockerHostedRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDockerHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_19",
		Method:             "GET",
		PathPattern:        "/v1/repositories/docker/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDockerHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDockerHostedRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_19: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMavenHostedRepository gets repository
*/
func (a *Client) GetMavenHostedRepository(params *GetMavenHostedRepositoryParams, opts ...ClientOption) (*GetMavenHostedRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMavenHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_2",
		Method:             "GET",
		PathPattern:        "/v1/repositories/maven/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMavenHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMavenHostedRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDockerProxyRepository gets repository
*/
func (a *Client) GetDockerProxyRepository(params *GetDockerProxyRepositoryParams, opts ...ClientOption) (*GetDockerProxyRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDockerProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_20",
		Method:             "GET",
		PathPattern:        "/v1/repositories/docker/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDockerProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDockerProxyRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_20: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetYumGroupRepository gets repository
*/
func (a *Client) GetYumGroupRepository(params *GetYumGroupRepositoryParams, opts ...ClientOption) (*GetYumGroupRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetYumGroupRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_21",
		Method:             "GET",
		PathPattern:        "/v1/repositories/yum/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetYumGroupRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetYumGroupRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_21: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetYumHostedRepository gets repository
*/
func (a *Client) GetYumHostedRepository(params *GetYumHostedRepositoryParams, opts ...ClientOption) (*GetYumHostedRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetYumHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_22",
		Method:             "GET",
		PathPattern:        "/v1/repositories/yum/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetYumHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetYumHostedRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_22: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetYumProxyRepository gets repository
*/
func (a *Client) GetYumProxyRepository(params *GetYumProxyRepositoryParams, opts ...ClientOption) (*GetYumProxyRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetYumProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_23",
		Method:             "GET",
		PathPattern:        "/v1/repositories/yum/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetYumProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetYumProxyRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_23: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHelmHostedRepository gets repository
*/
func (a *Client) GetHelmHostedRepository(params *GetHelmHostedRepositoryParams, opts ...ClientOption) (*GetHelmHostedRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHelmHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_24",
		Method:             "GET",
		PathPattern:        "/v1/repositories/helm/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHelmHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHelmHostedRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_24: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHelmProxyRepository gets repository
*/
func (a *Client) GetHelmProxyRepository(params *GetHelmProxyRepositoryParams, opts ...ClientOption) (*GetHelmProxyRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHelmProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_25",
		Method:             "GET",
		PathPattern:        "/v1/repositories/helm/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHelmProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHelmProxyRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_25: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGitLfsHostedRepository gets repository
*/
func (a *Client) GetGitLfsHostedRepository(params *GetGitLfsHostedRepositoryParams, opts ...ClientOption) (*GetGitLfsHostedRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGitLfsHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_26",
		Method:             "GET",
		PathPattern:        "/v1/repositories/gitlfs/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGitLfsHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGitLfsHostedRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_26: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPypiGroupRepository gets repository
*/
func (a *Client) GetPypiGroupRepository(params *GetPypiGroupRepositoryParams, opts ...ClientOption) (*GetPypiGroupRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPypiGroupRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_27",
		Method:             "GET",
		PathPattern:        "/v1/repositories/pypi/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPypiGroupRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPypiGroupRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_27: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPypiHostedRepository gets repository
*/
func (a *Client) GetPypiHostedRepository(params *GetPypiHostedRepositoryParams, opts ...ClientOption) (*GetPypiHostedRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPypiHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_28",
		Method:             "GET",
		PathPattern:        "/v1/repositories/pypi/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPypiHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPypiHostedRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_28: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPypiProxyRepository gets repository
*/
func (a *Client) GetPypiProxyRepository(params *GetPypiProxyRepositoryParams, opts ...ClientOption) (*GetPypiProxyRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPypiProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_29",
		Method:             "GET",
		PathPattern:        "/v1/repositories/pypi/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPypiProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPypiProxyRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_29: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMavenProxyRepository gets repository
*/
func (a *Client) GetMavenProxyRepository(params *GetMavenProxyRepositoryParams, opts ...ClientOption) (*GetMavenProxyRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMavenProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_3",
		Method:             "GET",
		PathPattern:        "/v1/repositories/maven/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMavenProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMavenProxyRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCondaProxyRepository gets repository
*/
func (a *Client) GetCondaProxyRepository(params *GetCondaProxyRepositoryParams, opts ...ClientOption) (*GetCondaProxyRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCondaProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_30",
		Method:             "GET",
		PathPattern:        "/v1/repositories/conda/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCondaProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCondaProxyRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_30: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetConanProxyRepository gets repository
*/
func (a *Client) GetConanProxyRepository(params *GetConanProxyRepositoryParams, opts ...ClientOption) (*GetConanProxyRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConanProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_31",
		Method:             "GET",
		PathPattern:        "/v1/repositories/conan/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConanProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConanProxyRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_31: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRGroupRepository gets repository
*/
func (a *Client) GetRGroupRepository(params *GetRGroupRepositoryParams, opts ...ClientOption) (*GetRGroupRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRGroupRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_32",
		Method:             "GET",
		PathPattern:        "/v1/repositories/r/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRGroupRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRGroupRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_32: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRHostedRepository gets repository
*/
func (a *Client) GetRHostedRepository(params *GetRHostedRepositoryParams, opts ...ClientOption) (*GetRHostedRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_33",
		Method:             "GET",
		PathPattern:        "/v1/repositories/r/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRHostedRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_33: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRProxyRepository gets repository
*/
func (a *Client) GetRProxyRepository(params *GetRProxyRepositoryParams, opts ...ClientOption) (*GetRProxyRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_34",
		Method:             "GET",
		PathPattern:        "/v1/repositories/r/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRProxyRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_34: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCocoapodsProxyRepository gets repository
*/
func (a *Client) GetCocoapodsProxyRepository(params *GetCocoapodsProxyRepositoryParams, opts ...ClientOption) (*GetCocoapodsProxyRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCocoapodsProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_35",
		Method:             "GET",
		PathPattern:        "/v1/repositories/cocoapods/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCocoapodsProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCocoapodsProxyRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_35: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGolangGroupRepository gets repository
*/
func (a *Client) GetGolangGroupRepository(params *GetGolangGroupRepositoryParams, opts ...ClientOption) (*GetGolangGroupRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGolangGroupRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_36",
		Method:             "GET",
		PathPattern:        "/v1/repositories/go/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGolangGroupRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGolangGroupRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_36: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGolangProxyRepository gets repository
*/
func (a *Client) GetGolangProxyRepository(params *GetGolangProxyRepositoryParams, opts ...ClientOption) (*GetGolangProxyRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGolangProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_37",
		Method:             "GET",
		PathPattern:        "/v1/repositories/go/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGolangProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGolangProxyRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_37: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetP2ProxyRepository gets repository
*/
func (a *Client) GetP2ProxyRepository(params *GetP2ProxyRepositoryParams, opts ...ClientOption) (*GetP2ProxyRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetP2ProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_38",
		Method:             "GET",
		PathPattern:        "/v1/repositories/p2/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetP2ProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetP2ProxyRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_38: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBowerGroupRepository gets repository
*/
func (a *Client) GetBowerGroupRepository(params *GetBowerGroupRepositoryParams, opts ...ClientOption) (*GetBowerGroupRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBowerGroupRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_39",
		Method:             "GET",
		PathPattern:        "/v1/repositories/bower/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBowerGroupRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBowerGroupRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_39: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAptHostedRepository gets repository
*/
func (a *Client) GetAptHostedRepository(params *GetAptHostedRepositoryParams, opts ...ClientOption) (*GetAptHostedRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAptHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_4",
		Method:             "GET",
		PathPattern:        "/v1/repositories/apt/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAptHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAptHostedRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_4: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBowerHostedRepository gets repository
*/
func (a *Client) GetBowerHostedRepository(params *GetBowerHostedRepositoryParams, opts ...ClientOption) (*GetBowerHostedRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBowerHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_40",
		Method:             "GET",
		PathPattern:        "/v1/repositories/bower/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBowerHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBowerHostedRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_40: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBowerProxyRepository gets repository
*/
func (a *Client) GetBowerProxyRepository(params *GetBowerProxyRepositoryParams, opts ...ClientOption) (*GetBowerProxyRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBowerProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_41",
		Method:             "GET",
		PathPattern:        "/v1/repositories/bower/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBowerProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBowerProxyRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_41: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAptProxyRepository gets repository
*/
func (a *Client) GetAptProxyRepository(params *GetAptProxyRepositoryParams, opts ...ClientOption) (*GetAptProxyRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAptProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_5",
		Method:             "GET",
		PathPattern:        "/v1/repositories/apt/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAptProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAptProxyRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_5: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRawGroupRepository gets repository
*/
func (a *Client) GetRawGroupRepository(params *GetRawGroupRepositoryParams, opts ...ClientOption) (*GetRawGroupRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRawGroupRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_6",
		Method:             "GET",
		PathPattern:        "/v1/repositories/raw/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRawGroupRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRawGroupRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_6: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRawHostedRepository gets repository
*/
func (a *Client) GetRawHostedRepository(params *GetRawHostedRepositoryParams, opts ...ClientOption) (*GetRawHostedRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRawHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_7",
		Method:             "GET",
		PathPattern:        "/v1/repositories/raw/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRawHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRawHostedRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_7: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRawProxyRepository gets repository
*/
func (a *Client) GetRawProxyRepository(params *GetRawProxyRepositoryParams, opts ...ClientOption) (*GetRawProxyRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRawProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_8",
		Method:             "GET",
		PathPattern:        "/v1/repositories/raw/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRawProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRawProxyRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_8: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNpmGroupRepository gets repository
*/
func (a *Client) GetNpmGroupRepository(params *GetNpmGroupRepositoryParams, opts ...ClientOption) (*GetNpmGroupRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNpmGroupRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository_9",
		Method:             "GET",
		PathPattern:        "/v1/repositories/npm/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNpmGroupRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNpmGroupRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository_9: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InvalidateCache invalidates repository cache proxy or group repositories only
*/
func (a *Client) InvalidateCache(params *InvalidateCacheParams, opts ...ClientOption) (*InvalidateCacheNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInvalidateCacheParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "invalidateCache",
		Method:             "POST",
		PathPattern:        "/v1/repositories/{repositoryName}/invalidate-cache",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InvalidateCacheReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InvalidateCacheNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for invalidateCache: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RebuildIndex schedules a repair rebuild repository search task hosted or proxy repositories only
*/
func (a *Client) RebuildIndex(params *RebuildIndexParams, opts ...ClientOption) (*RebuildIndexNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRebuildIndexParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rebuildIndex",
		Method:             "POST",
		PathPattern:        "/v1/repositories/{repositoryName}/rebuild-index",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RebuildIndexReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RebuildIndexNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rebuildIndex: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMavenGroupRepository updates maven group repository
*/
func (a *Client) UpdateMavenGroupRepository(params *UpdateMavenGroupRepositoryParams, opts ...ClientOption) (*UpdateMavenGroupRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMavenGroupRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/maven/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMavenGroupRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMavenGroupRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMavenHostedRepository updates maven hosted repository
*/
func (a *Client) UpdateMavenHostedRepository(params *UpdateMavenHostedRepositoryParams, opts ...ClientOption) (*UpdateMavenHostedRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMavenHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_1",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/maven/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMavenHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMavenHostedRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateNpmProxyRepository updates npm proxy repository
*/
func (a *Client) UpdateNpmProxyRepository(params *UpdateNpmProxyRepositoryParams, opts ...ClientOption) (*UpdateNpmProxyRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNpmProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_10",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/npm/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateNpmProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNpmProxyRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_10: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateNugetGroupRepository updates nu get group repository
*/
func (a *Client) UpdateNugetGroupRepository(params *UpdateNugetGroupRepositoryParams, opts ...ClientOption) (*UpdateNugetGroupRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNugetGroupRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_11",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/nuget/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateNugetGroupRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNugetGroupRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_11: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateNugetHostedRepository updates nu get hosted repository
*/
func (a *Client) UpdateNugetHostedRepository(params *UpdateNugetHostedRepositoryParams, opts ...ClientOption) (*UpdateNugetHostedRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNugetHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_12",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/nuget/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateNugetHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNugetHostedRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_12: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateNugetProxyRepository updates nu get proxy repository
*/
func (a *Client) UpdateNugetProxyRepository(params *UpdateNugetProxyRepositoryParams, opts ...ClientOption) (*UpdateNugetProxyRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNugetProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_13",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/nuget/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateNugetProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNugetProxyRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_13: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateRubyGemsGroupRepository updates ruby gems group repository
*/
func (a *Client) UpdateRubyGemsGroupRepository(params *UpdateRubyGemsGroupRepositoryParams, opts ...ClientOption) (*UpdateRubyGemsGroupRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRubyGemsGroupRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_14",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/rubygems/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateRubyGemsGroupRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRubyGemsGroupRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_14: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateRubyGemsHostedRepository updates ruby gems hosted repository
*/
func (a *Client) UpdateRubyGemsHostedRepository(params *UpdateRubyGemsHostedRepositoryParams, opts ...ClientOption) (*UpdateRubyGemsHostedRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRubyGemsHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_15",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/rubygems/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateRubyGemsHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRubyGemsHostedRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_15: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateRubyGemsProxyRepository updates ruby gems proxy repository
*/
func (a *Client) UpdateRubyGemsProxyRepository(params *UpdateRubyGemsProxyRepositoryParams, opts ...ClientOption) (*UpdateRubyGemsProxyRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRubyGemsProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_16",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/rubygems/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateRubyGemsProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRubyGemsProxyRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_16: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateDockerGroupRepository updates docker group repository
*/
func (a *Client) UpdateDockerGroupRepository(params *UpdateDockerGroupRepositoryParams, opts ...ClientOption) (*UpdateDockerGroupRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDockerGroupRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_17",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/docker/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDockerGroupRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDockerGroupRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_17: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateDockerHostedRepository updates docker hosted repository
*/
func (a *Client) UpdateDockerHostedRepository(params *UpdateDockerHostedRepositoryParams, opts ...ClientOption) (*UpdateDockerHostedRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDockerHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_18",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/docker/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDockerHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDockerHostedRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_18: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateDockerProxyRepository updates docker group repository
*/
func (a *Client) UpdateDockerProxyRepository(params *UpdateDockerProxyRepositoryParams, opts ...ClientOption) (*UpdateDockerProxyRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDockerProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_19",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/docker/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDockerProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDockerProxyRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_19: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMavenProxyRepository updates maven proxy repository
*/
func (a *Client) UpdateMavenProxyRepository(params *UpdateMavenProxyRepositoryParams, opts ...ClientOption) (*UpdateMavenProxyRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMavenProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_2",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/maven/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMavenProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMavenProxyRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateYumGroupRepository updates yum group repository
*/
func (a *Client) UpdateYumGroupRepository(params *UpdateYumGroupRepositoryParams, opts ...ClientOption) (*UpdateYumGroupRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateYumGroupRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_20",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/yum/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateYumGroupRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateYumGroupRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_20: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateYumHostedRepository updates yum hosted repository
*/
func (a *Client) UpdateYumHostedRepository(params *UpdateYumHostedRepositoryParams, opts ...ClientOption) (*UpdateYumHostedRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateYumHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_21",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/yum/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateYumHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateYumHostedRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_21: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateYumProxyRepository updates yum proxy repository
*/
func (a *Client) UpdateYumProxyRepository(params *UpdateYumProxyRepositoryParams, opts ...ClientOption) (*UpdateYumProxyRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateYumProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_22",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/yum/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateYumProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateYumProxyRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_22: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateHelmHostedRepository updates helm hosted repository
*/
func (a *Client) UpdateHelmHostedRepository(params *UpdateHelmHostedRepositoryParams, opts ...ClientOption) (*UpdateHelmHostedRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateHelmHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_23",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/helm/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateHelmHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateHelmHostedRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_23: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateHelmProxyRepository updates helm proxy repository
*/
func (a *Client) UpdateHelmProxyRepository(params *UpdateHelmProxyRepositoryParams, opts ...ClientOption) (*UpdateHelmProxyRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateHelmProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_24",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/helm/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateHelmProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateHelmProxyRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_24: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateGitLfsHostedRepository updates git l f s hosted repository
*/
func (a *Client) UpdateGitLfsHostedRepository(params *UpdateGitLfsHostedRepositoryParams, opts ...ClientOption) (*UpdateGitLfsHostedRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGitLfsHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_25",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/gitlfs/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateGitLfsHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGitLfsHostedRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_25: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePypiGroupRepository updates py p i group repository
*/
func (a *Client) UpdatePypiGroupRepository(params *UpdatePypiGroupRepositoryParams, opts ...ClientOption) (*UpdatePypiGroupRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePypiGroupRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_26",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/pypi/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatePypiGroupRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePypiGroupRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_26: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePypiHostedRepository updates py p i hosted repository
*/
func (a *Client) UpdatePypiHostedRepository(params *UpdatePypiHostedRepositoryParams, opts ...ClientOption) (*UpdatePypiHostedRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePypiHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_27",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/pypi/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatePypiHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePypiHostedRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_27: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePypiProxyRepository updates py p i proxy repository
*/
func (a *Client) UpdatePypiProxyRepository(params *UpdatePypiProxyRepositoryParams, opts ...ClientOption) (*UpdatePypiProxyRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePypiProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_28",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/pypi/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatePypiProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePypiProxyRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_28: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateCondaProxyRepository updates conda proxy repository
*/
func (a *Client) UpdateCondaProxyRepository(params *UpdateCondaProxyRepositoryParams, opts ...ClientOption) (*UpdateCondaProxyRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCondaProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_29",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/conda/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCondaProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCondaProxyRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_29: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAptHostedRepository updates a p t hosted repository
*/
func (a *Client) UpdateAptHostedRepository(params *UpdateAptHostedRepositoryParams, opts ...ClientOption) (*UpdateAptHostedRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAptHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_3",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/apt/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAptHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAptHostedRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateConanProxyRepository updates conan proxy repository
*/
func (a *Client) UpdateConanProxyRepository(params *UpdateConanProxyRepositoryParams, opts ...ClientOption) (*UpdateConanProxyRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateConanProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_30",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/conan/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateConanProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateConanProxyRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_30: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateRGroupRepository updates r group repository
*/
func (a *Client) UpdateRGroupRepository(params *UpdateRGroupRepositoryParams, opts ...ClientOption) (*UpdateRGroupRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRGroupRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_31",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/r/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateRGroupRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRGroupRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_31: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateRHostedRepository updates r hosted repository
*/
func (a *Client) UpdateRHostedRepository(params *UpdateRHostedRepositoryParams, opts ...ClientOption) (*UpdateRHostedRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_32",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/r/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateRHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRHostedRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_32: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateRProxyRepository updates r proxy repository
*/
func (a *Client) UpdateRProxyRepository(params *UpdateRProxyRepositoryParams, opts ...ClientOption) (*UpdateRProxyRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_33",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/r/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateRProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRProxyRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_33: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateCocoapodsProxyRepository updates cocoapods proxy repository
*/
func (a *Client) UpdateCocoapodsProxyRepository(params *UpdateCocoapodsProxyRepositoryParams, opts ...ClientOption) (*UpdateCocoapodsProxyRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCocoapodsProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_34",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/cocoapods/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCocoapodsProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCocoapodsProxyRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_34: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateGolangGroupRepository updates a go group repository
*/
func (a *Client) UpdateGolangGroupRepository(params *UpdateGolangGroupRepositoryParams, opts ...ClientOption) (*UpdateGolangGroupRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGolangGroupRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_35",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/go/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateGolangGroupRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGolangGroupRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_35: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateGolangProxyRepository updates a go proxy repository
*/
func (a *Client) UpdateGolangProxyRepository(params *UpdateGolangProxyRepositoryParams, opts ...ClientOption) (*UpdateGolangProxyRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGolangProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_36",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/go/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateGolangProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGolangProxyRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_36: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateP2ProxyRepository updates p2 proxy repository
*/
func (a *Client) UpdateP2ProxyRepository(params *UpdateP2ProxyRepositoryParams, opts ...ClientOption) (*UpdateP2ProxyRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateP2ProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_37",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/p2/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateP2ProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateP2ProxyRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_37: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateBowerGroupRepository updates bower group repository
*/
func (a *Client) UpdateBowerGroupRepository(params *UpdateBowerGroupRepositoryParams, opts ...ClientOption) (*UpdateBowerGroupRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBowerGroupRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_38",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/bower/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateBowerGroupRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBowerGroupRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_38: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateBowerHostedRepository updates bower hosted repository
*/
func (a *Client) UpdateBowerHostedRepository(params *UpdateBowerHostedRepositoryParams, opts ...ClientOption) (*UpdateBowerHostedRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBowerHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_39",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/bower/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateBowerHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBowerHostedRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_39: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAptProxyRepository updates a p t proxy repository
*/
func (a *Client) UpdateAptProxyRepository(params *UpdateAptProxyRepositoryParams, opts ...ClientOption) (*UpdateAptProxyRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAptProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_4",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/apt/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAptProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAptProxyRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_4: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateBowerProxyRepository updates bower proxy repository
*/
func (a *Client) UpdateBowerProxyRepository(params *UpdateBowerProxyRepositoryParams, opts ...ClientOption) (*UpdateBowerProxyRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBowerProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_40",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/bower/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateBowerProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBowerProxyRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_40: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateRawGroupRepository updates raw group repository
*/
func (a *Client) UpdateRawGroupRepository(params *UpdateRawGroupRepositoryParams, opts ...ClientOption) (*UpdateRawGroupRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRawGroupRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_5",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/raw/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateRawGroupRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRawGroupRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_5: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateRawHostedRepository updates raw hosted repository
*/
func (a *Client) UpdateRawHostedRepository(params *UpdateRawHostedRepositoryParams, opts ...ClientOption) (*UpdateRawHostedRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRawHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_6",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/raw/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateRawHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRawHostedRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_6: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateRawProxyRepository updates raw proxy repository
*/
func (a *Client) UpdateRawProxyRepository(params *UpdateRawProxyRepositoryParams, opts ...ClientOption) (*UpdateRawProxyRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRawProxyRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_7",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/raw/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateRawProxyRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRawProxyRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_7: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateNpmGroupRepository updates npm group repository
*/
func (a *Client) UpdateNpmGroupRepository(params *UpdateNpmGroupRepositoryParams, opts ...ClientOption) (*UpdateNpmGroupRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNpmGroupRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_8",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/npm/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateNpmGroupRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNpmGroupRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_8: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateNpmHostedRepository updates npm hosted repository
*/
func (a *Client) UpdateNpmHostedRepository(params *UpdateNpmHostedRepositoryParams, opts ...ClientOption) (*UpdateNpmHostedRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNpmHostedRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRepository_9",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/npm/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateNpmHostedRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNpmHostedRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository_9: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
