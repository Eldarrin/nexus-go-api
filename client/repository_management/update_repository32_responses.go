// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UpdateRHostedRepositoryReader is a Reader for the UpdateRHostedRepository structure.
type UpdateRHostedRepositoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRHostedRepositoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateRHostedRepositoryNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateRHostedRepositoryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateRHostedRepositoryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateRHostedRepositoryNoContent creates a UpdateRHostedRepositoryNoContent with default headers values
func NewUpdateRHostedRepositoryNoContent() *UpdateRHostedRepositoryNoContent {
	return &UpdateRHostedRepositoryNoContent{}
}

/*
	UpdateRHostedRepositoryNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type UpdateRHostedRepositoryNoContent struct {
}

// IsSuccess returns true when this update repository32 no content response has a 2xx status code
func (o *UpdateRHostedRepositoryNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update repository32 no content response has a 3xx status code
func (o *UpdateRHostedRepositoryNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository32 no content response has a 4xx status code
func (o *UpdateRHostedRepositoryNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update repository32 no content response has a 5xx status code
func (o *UpdateRHostedRepositoryNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository32 no content response a status code equal to that given
func (o *UpdateRHostedRepositoryNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *UpdateRHostedRepositoryNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/hosted/{repositoryName}][%d] updateRepository32NoContent ", 204)
}

func (o *UpdateRHostedRepositoryNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/hosted/{repositoryName}][%d] updateRepository32NoContent ", 204)
}

func (o *UpdateRHostedRepositoryNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRHostedRepositoryUnauthorized creates a UpdateRHostedRepositoryUnauthorized with default headers values
func NewUpdateRHostedRepositoryUnauthorized() *UpdateRHostedRepositoryUnauthorized {
	return &UpdateRHostedRepositoryUnauthorized{}
}

/*
	UpdateRHostedRepositoryUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type UpdateRHostedRepositoryUnauthorized struct {
}

// IsSuccess returns true when this update repository32 unauthorized response has a 2xx status code
func (o *UpdateRHostedRepositoryUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository32 unauthorized response has a 3xx status code
func (o *UpdateRHostedRepositoryUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository32 unauthorized response has a 4xx status code
func (o *UpdateRHostedRepositoryUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository32 unauthorized response has a 5xx status code
func (o *UpdateRHostedRepositoryUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository32 unauthorized response a status code equal to that given
func (o *UpdateRHostedRepositoryUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UpdateRHostedRepositoryUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/hosted/{repositoryName}][%d] updateRepository32Unauthorized ", 401)
}

func (o *UpdateRHostedRepositoryUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/hosted/{repositoryName}][%d] updateRepository32Unauthorized ", 401)
}

func (o *UpdateRHostedRepositoryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRHostedRepositoryForbidden creates a UpdateRHostedRepositoryForbidden with default headers values
func NewUpdateRHostedRepositoryForbidden() *UpdateRHostedRepositoryForbidden {
	return &UpdateRHostedRepositoryForbidden{}
}

/*
	UpdateRHostedRepositoryForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type UpdateRHostedRepositoryForbidden struct {
}

// IsSuccess returns true when this update repository32 forbidden response has a 2xx status code
func (o *UpdateRHostedRepositoryForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository32 forbidden response has a 3xx status code
func (o *UpdateRHostedRepositoryForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository32 forbidden response has a 4xx status code
func (o *UpdateRHostedRepositoryForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository32 forbidden response has a 5xx status code
func (o *UpdateRHostedRepositoryForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository32 forbidden response a status code equal to that given
func (o *UpdateRHostedRepositoryForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateRHostedRepositoryForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/hosted/{repositoryName}][%d] updateRepository32Forbidden ", 403)
}

func (o *UpdateRHostedRepositoryForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/hosted/{repositoryName}][%d] updateRepository32Forbidden ", 403)
}

func (o *UpdateRHostedRepositoryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
