// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UpdateGolangGroupRepositoryReader is a Reader for the UpdateGolangGroupRepository structure.
type UpdateGolangGroupRepositoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateGolangGroupRepositoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateGolangGroupRepositoryNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateGolangGroupRepositoryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateGolangGroupRepositoryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateGolangGroupRepositoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateGolangGroupRepositoryNoContent creates a UpdateGolangGroupRepositoryNoContent with default headers values
func NewUpdateGolangGroupRepositoryNoContent() *UpdateGolangGroupRepositoryNoContent {
	return &UpdateGolangGroupRepositoryNoContent{}
}

/*
	UpdateGolangGroupRepositoryNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type UpdateGolangGroupRepositoryNoContent struct {
}

// IsSuccess returns true when this update repository35 no content response has a 2xx status code
func (o *UpdateGolangGroupRepositoryNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update repository35 no content response has a 3xx status code
func (o *UpdateGolangGroupRepositoryNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository35 no content response has a 4xx status code
func (o *UpdateGolangGroupRepositoryNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update repository35 no content response has a 5xx status code
func (o *UpdateGolangGroupRepositoryNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository35 no content response a status code equal to that given
func (o *UpdateGolangGroupRepositoryNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *UpdateGolangGroupRepositoryNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/group/{repositoryName}][%d] updateRepository35NoContent ", 204)
}

func (o *UpdateGolangGroupRepositoryNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/group/{repositoryName}][%d] updateRepository35NoContent ", 204)
}

func (o *UpdateGolangGroupRepositoryNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateGolangGroupRepositoryUnauthorized creates a UpdateGolangGroupRepositoryUnauthorized with default headers values
func NewUpdateGolangGroupRepositoryUnauthorized() *UpdateGolangGroupRepositoryUnauthorized {
	return &UpdateGolangGroupRepositoryUnauthorized{}
}

/*
	UpdateGolangGroupRepositoryUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type UpdateGolangGroupRepositoryUnauthorized struct {
}

// IsSuccess returns true when this update repository35 unauthorized response has a 2xx status code
func (o *UpdateGolangGroupRepositoryUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository35 unauthorized response has a 3xx status code
func (o *UpdateGolangGroupRepositoryUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository35 unauthorized response has a 4xx status code
func (o *UpdateGolangGroupRepositoryUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository35 unauthorized response has a 5xx status code
func (o *UpdateGolangGroupRepositoryUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository35 unauthorized response a status code equal to that given
func (o *UpdateGolangGroupRepositoryUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UpdateGolangGroupRepositoryUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/group/{repositoryName}][%d] updateRepository35Unauthorized ", 401)
}

func (o *UpdateGolangGroupRepositoryUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/group/{repositoryName}][%d] updateRepository35Unauthorized ", 401)
}

func (o *UpdateGolangGroupRepositoryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateGolangGroupRepositoryForbidden creates a UpdateGolangGroupRepositoryForbidden with default headers values
func NewUpdateGolangGroupRepositoryForbidden() *UpdateGolangGroupRepositoryForbidden {
	return &UpdateGolangGroupRepositoryForbidden{}
}

/*
	UpdateGolangGroupRepositoryForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type UpdateGolangGroupRepositoryForbidden struct {
}

// IsSuccess returns true when this update repository35 forbidden response has a 2xx status code
func (o *UpdateGolangGroupRepositoryForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository35 forbidden response has a 3xx status code
func (o *UpdateGolangGroupRepositoryForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository35 forbidden response has a 4xx status code
func (o *UpdateGolangGroupRepositoryForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository35 forbidden response has a 5xx status code
func (o *UpdateGolangGroupRepositoryForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository35 forbidden response a status code equal to that given
func (o *UpdateGolangGroupRepositoryForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateGolangGroupRepositoryForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/group/{repositoryName}][%d] updateRepository35Forbidden ", 403)
}

func (o *UpdateGolangGroupRepositoryForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/group/{repositoryName}][%d] updateRepository35Forbidden ", 403)
}

func (o *UpdateGolangGroupRepositoryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateGolangGroupRepositoryNotFound creates a UpdateGolangGroupRepositoryNotFound with default headers values
func NewUpdateGolangGroupRepositoryNotFound() *UpdateGolangGroupRepositoryNotFound {
	return &UpdateGolangGroupRepositoryNotFound{}
}

/*
	UpdateGolangGroupRepositoryNotFound describes a response with status code 404, with default header values.

Repository not found
*/
type UpdateGolangGroupRepositoryNotFound struct {
}

// IsSuccess returns true when this update repository35 not found response has a 2xx status code
func (o *UpdateGolangGroupRepositoryNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository35 not found response has a 3xx status code
func (o *UpdateGolangGroupRepositoryNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository35 not found response has a 4xx status code
func (o *UpdateGolangGroupRepositoryNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository35 not found response has a 5xx status code
func (o *UpdateGolangGroupRepositoryNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository35 not found response a status code equal to that given
func (o *UpdateGolangGroupRepositoryNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateGolangGroupRepositoryNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/group/{repositoryName}][%d] updateRepository35NotFound ", 404)
}

func (o *UpdateGolangGroupRepositoryNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/group/{repositoryName}][%d] updateRepository35NotFound ", 404)
}

func (o *UpdateGolangGroupRepositoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
