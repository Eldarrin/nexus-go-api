// Code generated by go-swagger; DO NOT EDIT.

package security_management_j_w_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// ResetSecretReader is a Reader for the ResetSecret structure.
type ResetSecretReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ResetSecretReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 401:
		result := NewResetSecretUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewResetSecretForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewResetSecretUnauthorized creates a ResetSecretUnauthorized with default headers values
func NewResetSecretUnauthorized() *ResetSecretUnauthorized {
	return &ResetSecretUnauthorized{}
}

/*
	ResetSecretUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type ResetSecretUnauthorized struct {
}

// IsSuccess returns true when this reset secret unauthorized response has a 2xx status code
func (o *ResetSecretUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reset secret unauthorized response has a 3xx status code
func (o *ResetSecretUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reset secret unauthorized response has a 4xx status code
func (o *ResetSecretUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this reset secret unauthorized response has a 5xx status code
func (o *ResetSecretUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this reset secret unauthorized response a status code equal to that given
func (o *ResetSecretUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ResetSecretUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/security/jwt][%d] resetSecretUnauthorized ", 401)
}

func (o *ResetSecretUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/security/jwt][%d] resetSecretUnauthorized ", 401)
}

func (o *ResetSecretUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewResetSecretForbidden creates a ResetSecretForbidden with default headers values
func NewResetSecretForbidden() *ResetSecretForbidden {
	return &ResetSecretForbidden{}
}

/*
	ResetSecretForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type ResetSecretForbidden struct {
}

// IsSuccess returns true when this reset secret forbidden response has a 2xx status code
func (o *ResetSecretForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reset secret forbidden response has a 3xx status code
func (o *ResetSecretForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reset secret forbidden response has a 4xx status code
func (o *ResetSecretForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this reset secret forbidden response has a 5xx status code
func (o *ResetSecretForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this reset secret forbidden response a status code equal to that given
func (o *ResetSecretForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ResetSecretForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/security/jwt][%d] resetSecretForbidden ", 403)
}

func (o *ResetSecretForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/security/jwt][%d] resetSecretForbidden ", 403)
}

func (o *ResetSecretForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
